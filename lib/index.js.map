{"version":3,"sources":["../index.jsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\n\nvar nargs = /\\{([0-9a-zA-Z_]+)\\}/g;\n\nfunction getPositions(string, values) {\n\n  const postion = [];\n\n  string.replace(nargs, function replaceArg(match, capture, index) {\n\n    if (\n      !(\n        string[index - 1] === \"{\" &&\n        string[index + match.length] === \"}\"\n      )\n    ) {\n      postion.push({\n        startIndex: index,\n        endIndex: index + match.length,\n        match: match,\n        capture: capture,\n        value: values[capture]\n      })\n    }\n  });\n  return postion\n}\n\nfunction parseEscape (str){\n  return str.replace(nargs, function replaceArg(match, capture, index) {\n\n    if (\n      str[index - 1] === \"{\" &&\n      str[index + match.length] === \"}\"\n    ) {\n      return capture\n    }\n    return match\n  });\n}\n\nexport function template (\n   str,\n   values,\n   renderNoMatch = ()=> \"\",\n){\n  const arr = [];\n  const positions = getPositions(str, values);\n\n  if(positions.length < 1){\n    arr.push({ type: 'general', value: str });\n  }else {\n    let lastIndex = 0;\n\n    positions.forEach((p)=>{\n      const { startIndex, endIndex, value } = p;\n      const general = str.substring(lastIndex, startIndex);\n      arr.push({ type: 'general', value: general });\n\n      if(value){\n        arr.push({ type: 'var', value: value });\n      }else {\n        arr.push({ type: 'var', value: renderNoMatch(str, p), isNoMatch: true });\n      }\n\n      lastIndex = endIndex;\n    });\n\n    arr.push({ type:'general', value: str.substring(lastIndex) });\n\n  }\n\n  const parsedArr = arr.map((node)=>{\n    const { type, value } = node;\n    if(type === 'general' && typeof value === 'string'){\n      return parseEscape(value);\n    }\n    return value\n  });\n\n  return parsedArr;\n}\n\nexport default class ReactStringTemplate extends Component {\n  render() {\n    const { str, values, renderNoMatch, children } = this.props;\n    return children(template(str, values, renderNoMatch));\n  }\n}\n\nReactStringTemplate.defaultProps = {\n  str: '',\n  values: {},\n  renderNoMatch : () => '',\n  children: arr => arr,\n}\n\n"]}